pipeline {
    agent any
    
    environment {
        APP_NAME = 'sharqm/nodeapp'
    }
    
    parameters {
        string(name: 'BUILD_NUMBER', description: 'Build number to use for Docker image')
        string(name:'WORKSPACE', description: 'WORKSPACE to use to get secrect varaibles file' )
    }
    
    stages {
            
        stage('Load Secrets') {
            steps{
                withCredentials([file(credentialsId: '${WORKSPACE}_variables.tfvars', variable: 'SECRET_FILE')]) {
                    script {
                        def secretFileContent = readFile(SECRET_FILE)
                        def secrets = [:]
                        
                        // Process the secret file content
                        secretFileContent.eachLine { line ->
                            def (key, value) = line.split('=')
                            secrets[key.trim()] = value.trim()
                        }
                        
                        env.RDS_HOSTNAME = secrets.RDS_HOSTNAME
                        env.RDS_PASSWORD = secrets.RDS_PASSWORD
                        env.RDS_PORT = secrets.RDS_PORT
                        env.RDS_USERNAME = secrets.RDS_USERNAME
                        env.REDIS_HOSTNAME = secrets.REDIS_HOSTNAME
                        env.REDIS_PORT = secrets.REDIS_PORT
                    }
                }
             }    
        }
        
        stage('Kill Running Containers') {
            steps {
                script {
                    sh """
                        echo ">>> Start Clearing old containers >>>"
                        CONTAINER_NAME="app-node"
                        EXISTING_CONTAINER_ID=\$(docker ps -aq -f name=\$CONTAINER_NAME)
                        if [ -n "\$EXISTING_CONTAINER_ID" ]; then
                            echo "Stopping and removing existing container: \$CONTAINER_NAME"
                            docker stop \$EXISTING_CONTAINER_ID || true
                            docker rm -f \$EXISTING_CONTAINER_ID || true
                            echo "Existing container removed: \$CONTAINER_NAME"
                        else
                            echo "No existing container to remove"
                        fi
                    """
                }
            }
        }
        
        stage('Delete Local Images') {
            steps {
                script {
                    sh """
                        echo ">>> Start Clearing old Docker images >>>"
                        docker ps -aq --filter="ancestor=${APP_NAME}" | xargs -r docker stop
                        docker ps -aq --filter="ancestor=${APP_NAME}" | xargs -r docker rm
                        docker rmi -f ${APP_NAME} || true
                        echo 'Clearing old images succeeded'
                    """
                }
            }
        }
        
        stage('Pull Latest Image') {
            steps {
                script {
                    sh "docker pull ${APP_NAME}:version_${params.BUILD_NUMBER}"
                }
            }
        }
        
        stage('Deploy Docker Container') {
            steps {
                script {
                    sh """
                        docker run -d -p 3000:3000 \\
                        -e RDS_HOSTNAME=\${RDS_HOSTNAME} \\
                        -e RDS_PASSWORD=\${RDS_PASSWORD} \\
                        -e RDS_PORT=\${RDS_PORT} \\
                        -e RDS_USERNAME=\${RDS_USERNAME} \\
                        -e REDIS_HOSTNAME=\${REDIS_HOSTNAME} \\
                        -e REDIS_PORT=\${REDIS_PORT} \\
                        --name app-node \\
                        ${APP_NAME}:version_${params.BUILD_NUMBER}
                    """
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
